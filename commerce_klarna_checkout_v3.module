<?php

/**
 * @file
 * Provides a payment method for Drupal Commerce using Klarna Checkout.
 */

use Klarna\Rest\Checkout\Order as KlarnaOrder;
use Klarna\Rest\OrderManagement\Order as KlarnaOrderManagement;
use Klarna\Rest\Transport\ConnectorInterface;
use Klarna\Rest\Transport\GuzzleConnector;

/**
 * Implements hook_menu().
 */
function commerce_klarna_checkout_v3_menu() {
  return [
    'commerce_klarna_checkout_v3/confirm/%commerce_order/%' => [
      'page callback' => 'commerce_klarna_checkout_v3_process_confirmation',
      'page arguments' => [2, 3],
      'file' => 'commerce_klarna_checkout_v3.inc',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ],
    'commerce_klarna_checkout_v3/push/%commerce_order/%' => [
      'page callback' => 'commerce_klarna_checkout_v3_process_push',
      'page arguments' => [2, 3],
      'file' => 'commerce_klarna_checkout_v3.inc',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ],
    'commerce_klarna_checkout_v3/validate/%commerce_order' => [
      'page callback' => 'commerce_klarna_checkout_v3_validate_order',
      'page arguments' => [2],
      'file' => 'commerce_klarna_checkout_v3.inc',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ],
  ];
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_klarna_checkout_v3_commerce_checkout_pane_info() {
  $checkout_panes['commerce_klarna_checkout_v3_confirm'] = [
    'title' => t('Klarna payment confirmation'),
    'page' => 'complete',
    'fieldset' => FALSE,
    'locked' => TRUE,
    'file' => 'includes/commerce_klarna_checkout_v3.checkout_pane.inc',
    'base' => 'commerce_klarna_checkout_v3_confirm_pane',
    'weight' => 10,
  ];

  return $checkout_panes;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_klarna_checkout_v3_commerce_payment_method_info() {
  $payment_methods['klarna_checkout_v3'] = [
    'base' => 'commerce_klarna_checkout_v3',
    'title' => t('Klarna Checkout'),
    'display_title' => t('Klarna Checkout - Choose between multiple payment methods'),
    'short_title' => t('Klarna'),
    'description' => t('Create a payment using Klarna.'),
    'terminal' => FALSE,
  ];
  return $payment_methods;
}

/**
 * Returns the default settings for the Klarna checkout payment method.
 */
function commerce_klarna_checkout_v3_default_settings() {
  return [
    'server' => 'test',
    'username' => '',
    'password' => '',
    'purchase_country' => 'US',
    'locale' => 'en-US',
    'terms_path' => '',
    'customer_profile' => [
      'create_billing_profile' => FALSE,
      'create_shipping_profile' => FALSE,
    ],
    'options' => [
      'allowed_customer_types' => [
        'person'
      ],
      'allow_separate_shipping_address' => FALSE,
    ],
  ];
}

/**
 * Payment method callback: settings form.
 */
function commerce_klarna_checkout_v3_settings_form($settings = NULL) {
  $form = [];

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_klarna_checkout_v3_default_settings();

  $form['username'] = [
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => $settings['username'],
    '#required' => TRUE,
  ];

  $form['password'] = [
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => $settings['password'],
    '#required' => TRUE,
  ];

  $form['server'] = [
    '#type' => 'radios',
    '#title' => t('Server'),
    '#options' => [
      'test' => ('Test - use for testing'),
      'live' => ('Live - use for processing real transactions'),
    ],
    '#default_value' => $settings['server'],
  ];

  $form['purchase_country'] = [
    '#type' => 'select',
    '#options' => [
      'AT' => t('Austria'),
      'DK' => t('Denmark'),
      'DE' => t('Germany'),
      'FI' => t('Finland'),
      'NL' => t('Netherlands'),
      'NO' => t('Norway'),
      'SE' => t('Sweden'),
      'GB' => t('United Kingdom'),
      'US' => t('United States'),
    ],
    '#title' => t('Purchase country'),
    '#default_value' => $settings['purchase_country'],
    '#required' => TRUE,
  ];

  $form['locale'] = [
    '#type' => 'select',
    '#options' => [
      'en-us' => t('English (United States)'),
      'en-gb' => t('English (United Kingdom)'),
      'nl-nl' => t('Dutch (Netherlands)'),
      'da-dk' => t('Danish (Denmark)'),
      'sv-se' => t('Swedish (Sweden)'),
    ],
    '#title' => t('Locale'),
    '#description' => t("RFC 1766 customer's locale."),
    '#default_value' => $settings['locale'],
    '#required' => TRUE,
  ];

  $form['terms_path'] = [
    '#type' => 'textfield',
    '#title' => t('Path to terms and conditions page'),
    '#default_value' => $settings['terms_path'],
    '#required' => TRUE,
  ];

  if (module_exists('commerce_customer')) {
    // Address field settings.
    $form['customer_profile'] = [
      '#type' => 'fieldset',
      '#title' => t('Customer profile settings'),
      '#collapsible' => FALSE,
    ];
    $form['customer_profile']['create_billing_profile'] = [
      '#type' => 'checkbox',
      '#title' => t('Create billing profile using information from Klarna'),
      '#description' => t('Using this option, you would probably want to disable the Billing information from the <a href="@url">Checkout pane</a>', ['@url' => url('admin/commerce/config/checkout')]),
      '#default_value' => $settings['customer_profile']['create_billing_profile'],
    ];
    if (module_exists('commerce_shipping')) {
      $form['customer_profile']['create_shipping_profile'] = [
        '#type' => 'checkbox',
        '#title' => t('Create a shipping profile using information from Klarna'),
        '#description' => t('Using this option, you would probably want to disable the Shipping information from the <a href="@url">Checkout pane</a>', ['@url' => url('admin/commerce/config/checkout')]),
        '#default_value'  => $settings['customer_profile']['create_shipping_profile'],
      ];
    }
  }

  $form['options'] = [
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#collapsible' => TRUE,
  ];

  $form['options']['allowed_customer_types'] = [
    '#type' => 'checkboxes',
    '#title' => t('Allowed customer types'),
    '#options' => [
      'person' => ('Person'),
      'organization' => ('Organization'),
    ],
    '#default_value' => $settings['options']['allowed_customer_types'],
    '#required' => TRUE,
  ];

  $form['options']['allow_separate_shipping_address'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow separate shipping address'),
    '#description' => t('If true, the consumer can enter different billing and shipping addresses.'),
    '#default_value' => $settings['options']['allow_separate_shipping_address'],
  ];

  return $form;
}

/**
 * Payment method callback: submit form.
 */
function commerce_klarna_checkout_v3_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  if (empty($payment_method['settings']['username']) || empty($payment_method['settings']['password'])) {
    return [];
  }
  $form = [];
  module_load_include('inc', 'commerce_klarna_checkout_v3');
  $klarna_order = commerce_klarna_checkout_v3_init($order, $payment_method);

  if ($klarna_order && !empty($klarna_order['html_snippet'])) {
    $form['klarna_snippet'] = [
      '#markup' => $klarna_order['html_snippet'],
    ];
  }

  return $form;
}

/**
 * Returns the URL to the Klarna server.
 *
 * @param $settings
 *   The payment method instance settings.
 *
 * @return
 *   The URL to use to submit requests to the Klarna server.
 */
function commerce_klarna_checkout_v3_server_url($settings) {
  if ($settings['purchase_country'] == 'US') {
    if ($settings['server'] == 'test') {
      return ConnectorInterface::NA_TEST_BASE_URL;
    }
    else {
      return ConnectorInterface::NA_BASE_URL;
    }
  }
  else {
    if ($settings['server'] == 'test') {
      return ConnectorInterface::EU_TEST_BASE_URL;
    }
    else {
      return ConnectorInterface::EU_BASE_URL;
    }
  }
}

/**
 * Creates an Klarna transaction for the specified charge amount.
 *
 * @param mixed $payment_method
 *   The payment method instance object used to charge this payment.
 * @param mixed $order
 *   The order object the payment applies to.
 * @param mixed $charge
 *   An array indicating the amount and currency code to charge.
 * @param \Klarna\Rest\OrderManagement\Order $klarna_order
 *   The Klarna order object.
 */
function commerce_klarna_checkout_v3_transaction_save($payment_method, $order, $charge, $klarna_order) {
  $transaction = commerce_payment_transaction_new('klarna_checkout_v3', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->remote_status = $klarna_order['status'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->remote_id = $klarna_order->getId();
  commerce_payment_transaction_save($transaction);
}

/**
 * Get the Klarna order ID matching the given order.
 *
 * @param $order_id
 *   The order_id.
 *
 * @return string
 *   The Klarna order ID for the given order ID if it exists, FALSE otherwise.
 */
function commerce_klarna_checkout_v3_get_mapping($order_id) {
  return db_query('SELECT klarna_order_id FROM {commerce_klarna_checkout_v3_mapping} WHERE order_id = :order_id', [':order_id' => $order_id])->fetchField();
}

/**
 * Store the Klarna order ID for the given order.
 *
 * @param $order_id
 *   The order ID.
 * @param $klarna_order_id
 *   The Klarna order ID.
 */
function commerce_klarna_checkout_v3_store_mapping($order_id, $klarna_order_id) {
  db_merge('commerce_klarna_checkout_v3_mapping')->key(['order_id' => $order_id])->fields([
    'order_id' => $order_id,
    'klarna_order_id' => $klarna_order_id,
  ])->execute();
}

/**
 * Fetch the Checkout order from Klarna.
 *
 * @param $order
 *   The order
 * @param $klarna_order_id
 *   (optional) The Klarna order ID to fetch.
 *
 * @return \Klarna\Rest\Checkout\Order|null
 *   Return the Klarna checkout order, or NULL if an exception was thrown.
 */
function commerce_klarna_checkout_v3_get_order($order, $klarna_order_id = NULL) {
  if (!isset($order->data['payment_method'])) {
    return NULL;
  }
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  // The payment method instance was not passed or could not be loaded, aborting.
  if (empty($payment_method) || !isset($payment_method['settings'])) {
    return NULL;
  }
  // Get the Klarna order_id in order to fetch the order from Klarna.
  $klarna_order_id = $klarna_order_id ?: commerce_klarna_checkout_v3_get_mapping($order->order_id);
  try {
    $connector = GuzzleConnector::create(
      $payment_method['settings']['username'],
      $payment_method['settings']['password'],
      commerce_klarna_checkout_v3_server_url($payment_method['settings'])
    );
    $klarna_order = new KlarnaOrder($connector, $klarna_order_id);
    $klarna_order->fetch();
    return $klarna_order;
  }
  catch (\Exception $exception) {
    watchdog_exception('commerce_klarna_checkout_v3', $exception);
    return NULL;
  }
}

/**
 * Implements hook_commerce_order_delete().
 */
function commerce_klarna_checkout_v3_commerce_order_delete($order) {
  db_delete('commerce_klarna_checkout_v3_mapping')
    ->condition('order_id', $order->order_id)
    ->execute();
}

/**
 * Implements hook_cron_queue_info().
 */
function commerce_klarna_checkout_v3_cron_queue_info() {
  $queues['commerce_klarna_checkout_v3_capture_order'] = [
    'worker callback' => 'commerce_klarna_checkout_v3_capture_order',
    'time' => 60,
  ];

  return $queues;
}

/**
 * Helper function: Build the order lines for the given line items.
 *
 * @param $line_items
 *   An array of line items.
 *
 * @return array
 *   An array of order lines in a format expected by Klarna.
 */
function _commerce_klarna_checkout_v3_build_order_lines($line_items) {
  $order_lines = [];
  // Check which of the Tax module is enabled.
  $commerce_tax_enabled = module_exists('commerce_tax');
  $commerce_vat_enabled = module_exists('commerce_vat');
  $product_line_item_types = commerce_product_line_item_types();

  // Map the Drupal line item type to the Klarna type.
  $types_mapping = [
    'shipping' => 'shipping_fee',
    'giftcard_use' => 'gift_card',
    'commerce_discount' => 'discount',
  ];

  // Assume physical for all the product line item types.
  foreach ($product_line_item_types as $line_item_type) {
    $types_mapping[$line_item_type] = 'physical';
  }

  foreach ($line_items as $line_item) {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $unit_price = $line_item_wrapper->commerce_unit_price->value();
    $line_item_total = $line_item_wrapper->commerce_total->value();

    $order_line = [
      'quantity' => (int) $line_item->quantity,
      'name' => commerce_line_item_title($line_item),
      'unit_price' => 0,
      'total_amount' => (int) $line_item_total['amount'],
      'tax_rate' => 0,
      'total_discount_amount' => 0,
      'total_tax_amount' => 0,
    ];

    // For product line item types.
    if (in_array($line_item->type, $product_line_item_types)) {
      $order_line['reference'] = $line_item_wrapper->commerce_product->sku->value();
    }

    // Calculate the unit price excluding discounts.
    foreach ($unit_price['data']['components'] as $key => $component) {
      if (strpos($component['name'], 'discount') === 0) {
        continue;
      }
      // The discount amount needs to be passed as a positive amount.
      $order_line['unit_price'] += $component['price']['amount'];
    }
    $order_line['unit_price'] = (int) $order_line['unit_price'];

    // Calculate the total discount.
    foreach ($line_item_total['data']['components'] as $key => $component) {
      if (strpos($component['name'], 'discount') !== 0) {
        continue;
      }
      // The discount amount needs to be passed as a positive amount.
      $order_line['total_discount_amount'] += -$component['price']['amount'];
    }
    $order_line['total_discount_amount'] = (int) $order_line['total_discount_amount'];

    // Calculate the tax.
    // If the tax module is enabled, try to get the tax rate.
    if ($commerce_tax_enabled) {
      $tax = commerce_tax_components($unit_price['data']['components']);
      $tax_rate = count($tax) ? (int) ($tax[0]['price']['data']['tax_rate']['rate'] * 10000) : 0;
      $order_line['tax_rate'] = $tax_rate;

      $tax_amount = commerce_tax_total_amount($line_item_total['data']['components'], FALSE, $line_item_total['currency_code']);
      $order_line['total_tax_amount'] = (int) commerce_round(COMMERCE_ROUND_HALF_UP, $tax_amount);
    }

    // Check the taxes with the VAT module if no tax has been found before.
    if ($commerce_vat_enabled && $order_line['tax_rate'] <= 0) {
      // Get the VAT rate.
      $vat = commerce_vat_components($unit_price['data']['components']);
      $vat_rate = count($vat) ? (int) ($vat[0]['price']['data']['vat_rate_info']['rate'] * 10000) : 0;
      $order_line['tax_rate'] = $vat_rate;
      $tax_amount = commerce_vat_total_amount($line_item_total['data']['components'], TRUE, $line_item_total['currency_code']);
      $order_line['total_tax_amount'] = (int) commerce_round(COMMERCE_ROUND_HALF_UP, $tax_amount);
    }

    if (isset($types_mapping[$line_item->type])) {
      $order_line['type'] = $types_mapping[$line_item->type];
    }

    $order_lines[] = $order_line;
  }

  return $order_lines;
}

/**
 * Queue worker callback: Create a Klarna capture for the given order.
 */
function commerce_klarna_checkout_v3_capture_order($data) {
  if (!isset($data['order_id'])) {
    return;
  }
  $order = commerce_order_load($data['order_id']);
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

  // If this order wasn't paid with Klarna v3, stop here.
  if ($payment_method['method_id'] != 'klarna_checkout_v3') {
    return;
  }
  // Get the Klarna order_id from our mapping table.
  $klarna_order_id = commerce_klarna_checkout_v3_get_mapping($order->order_id);

  if (!$klarna_order_id) {
    throw new \Exception('Unknown Klarna order ID, aborting.');
  }
  $connector = GuzzleConnector::create(
    $payment_method['settings']['username'],
    $payment_method['settings']['password'],
    commerce_klarna_checkout_v3_server_url($payment_method['settings'])
  );
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total = (int) $order_wrapper->commerce_order_total->amount->value();
  // Check if we need to update the order lines before capturing the order.
  $update_order_lines = !empty($data['update_order_lines']);

  $order_lines = _commerce_klarna_checkout_v3_build_order_lines($order_wrapper->commerce_line_items->value());
  $klarna_order = new KlarnaOrderManagement($connector, $klarna_order_id);
  // This API request can fail, but we don't catch the exception on purpose
  // so the item stays in the queue.
  if ($update_order_lines) {
    $klarna_order = $klarna_order->fetch();
    $klarna_order->updateAuthorization([
      'order_amount' => $order_total,
      'order_lines' => $order_lines,
    ]);
  }

  // This call could throw an exception but we don't catch it on purpose so
  // the item stays in the queue.
  $klarna_order->createCapture([
    'captured_amount' => $order_total,
    'order_lines' => $order_lines,
  ]);
}

/**
 * Acknowledge the given order.
 *
 * @param $order
 *   The order
 * @param $klarna_order_id
 *   (optional) The Klarna order ID to fetch.
 *
 * @return bool
 *   TRUE if the order was acknowledged, FALSE otherwise.
 */
function commerce_klarna_checkout_v3_acknowledge_order($order, $klarna_order_id = NULL) {
  if (!isset($order->data['payment_method'])) {
    return FALSE;
  }
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  // The payment method instance was not passed or could not be loaded, aborting.
  if (empty($payment_method) || !isset($payment_method['settings'])) {
    return FALSE;
  }
  module_load_include('inc', 'commerce_klarna_checkout_v3');
  // Get the Klarna order_id in order to fetch the order from Klarna.
  $klarna_order_id = $klarna_order_id ?: commerce_klarna_checkout_v3_get_mapping($order->order_id);
  try {
    $connector = GuzzleConnector::create(
      $payment_method['settings']['username'],
      $payment_method['settings']['password'],
      commerce_klarna_checkout_v3_server_url($payment_method['settings'])
    );
    $klarna_order = new KlarnaOrderManagement($connector, $klarna_order_id);
    $klarna_order->acknowledge();

    // Unfortunately, we have to fetch the Klarna checkout object, otherwise
    // we won't have access to the "merchant_requested" property, which contains
    // the "additional_checkbox" property.
    $klarna_order = commerce_klarna_checkout_v3_get_order($order, $klarna_order_id);
  }
  catch (Exception $e) {
    watchdog_exception('commerce_klarna_checkout_v3', $e);
    return FALSE;
  }
  if (variable_get('commerce_klarna_checkout_v3_logging_enabled', FALSE)) {
    watchdog(
      'commerce_klarna_checkout',
      'Acknowledging the order @order_id. Klarna object: <pre>@klarna</pre>.',
      array(
        '@order_id' => $order->order_id,
        '@klarna' => print_r($klarna_order, TRUE),
      ),
      WATCHDOG_NOTICE
    );
  }
  $charge = [
    'currency_code' => $klarna_order['purchase_currency'],
    'amount' => $klarna_order['order_amount']
  ];

  $data_key = 'commerce_klarna_checkout_order_acknowledged';
  while (!isset($order->data[$data_key])) {
    $transaction = db_transaction();
    try {
      $order->data[$data_key] = TRUE;

      // If Klarna was configured to show an additional checkbox when initiated,
      // we need to store the user "selection".
      if (isset($klarna_order['merchant_requested']['additional_checkbox'])) {
        $order->data['commerce_klarna_checkout_additional_checkbox'] = $klarna_order['merchant_requested']['additional_checkbox'];
      }
      if (!empty($klarna_order['billing_address'])) {
        $order->mail = $klarna_order['billing_address']['email'];

        // Create a billing customer profile if requested in the payment method
        // settings.
        if (!empty($payment_method['settings']['customer_profile']['create_billing_profile'])) {
          $billing_profile = commerce_klarna_checkout_v3_create_customer_profile($klarna_order, 'billing', $order->uid);

          if ($billing_profile && isset($order->commerce_customer_billing)) {
            $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'] = $billing_profile->profile_id;
          }
        }
      }
      // Create a shipping customer profile if requested in the payment method
      // settings.
      if (!empty($klarna_order['shipping_address']) && !empty($payment_method['settings']['customer_profile']['create_shipping_profile'])) {
        $shipping_profile = commerce_klarna_checkout_v3_create_customer_profile($klarna_order, 'shipping', $order->uid);

        if ($shipping_profile && isset($order->commerce_customer_shipping)) {
          $order->commerce_customer_shipping[LANGUAGE_NONE][0]['profile_id'] = $shipping_profile->profile_id;
        }
      }
      commerce_payment_redirect_pane_next_page($order, t('Completed order from Klarna push invocation.'));
      // Create the payment transaction.
      commerce_klarna_checkout_v3_transaction_save($payment_method, $order, $charge, $klarna_order);
    }
    // @todo: Find a way to make this exception handling generic.
    catch (\OptimisticLockException $exception) {
      $transaction->rollback();
      watchdog_exception('commerce_klarna_checkout_v3', $exception);
      $order = commerce_order_load($order->order_id);
    }
    catch (\Exception $exception) {
      $transaction->rollback();
      // Make sure we end the loop in case of a generic exception, since there's
      // no guarantee that the next attempt will succeed.
      $order->data[$data_key] = TRUE;
      watchdog_exception('commerce_klarna_checkout_v3', $exception);
    }
  }

  return TRUE;
}
